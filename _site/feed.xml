<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yibai@pku</title>
    <description>Yibai&#39;s personal blog, where you could see all sorts of crazy stuff
</description>
    <link>http://www.mengyibai.cn/</link>
    <atom:link href="http://www.mengyibai.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Nov 2017 11:17:17 +0800</pubDate>
    <lastBuildDate>Fri, 10 Nov 2017 11:17:17 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Compressing HTML files in Jekyll</title>
        <description>&lt;p&gt;The HTML files Jekyll generates are standard and conforming, but one small problem remains: they have lots of whitespaces in them. It not only makes control freaks like me find it diffcult to read, but also for a little less efficent for the DOM parsers to parse as well. Also, it makes the website a little bit more data consuming. So I’ll setup a plugin to automatically simplifies the files when generating them.&lt;/p&gt;

&lt;p&gt;The plugin is called &lt;a href=&quot;http://jch.penibelst.de/&quot;&gt;jekyll-compress-html&lt;/a&gt;. It uses Liquid, the language Jekyll uses to describe the way to generate HTML files. To set it up, all you need to do is place the Liquid file &lt;code class=&quot;highlighter-rouge&quot;&gt;compress.html&lt;/code&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; folder. Then add the following front matter before the &lt;code class=&quot;highlighter-rouge&quot;&gt;default.html&lt;/code&gt; template:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;compress&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rebuild your website and all should be in order!&lt;/p&gt;

&lt;p&gt;A few settings are be available. Add the settings in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file. The defaults settings are:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;compress_html:
  clippings: []
  comments: []
  endings: []
  ignore:
    envs: []
  blanklines: false
  profile: false
  startings: []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;startings&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;endings&lt;/code&gt; are for removing optional starting and ending tags. I don’t wish to use it, as it would make the file XML non-conforming. Might cause a tiny bit of trouble for some browsers. &lt;code class=&quot;highlighter-rouge&quot;&gt;comments&lt;/code&gt; is for removing HTML comments. There are no comments here at all, so I’ll just leave it be. &lt;code class=&quot;highlighter-rouge&quot;&gt;clippings&lt;/code&gt; is an array of elements around which whitespace will be removed. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; will remove all which are safe to remove, which I did. Others are for debug purposes, which I left alone.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Nov 2017 23:11:00 +0800</pubDate>
        <link>http://www.mengyibai.cn/2017/11/09/compressing-html-files-in-jekyll.html</link>
        <guid isPermaLink="true">http://www.mengyibai.cn/2017/11/09/compressing-html-files-in-jekyll.html</guid>
        
        
      </item>
    
      <item>
        <title>Atom</title>
        <description>&lt;p&gt;Atom is a great great great editor! It made my editing blogs much easier! I’ll document its usage another day.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2017 01:38:00 +0800</pubDate>
        <link>http://www.mengyibai.cn/2017/11/08/atom.html</link>
        <guid isPermaLink="true">http://www.mengyibai.cn/2017/11/08/atom.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting Up Openvpn</title>
        <description>&lt;h1 id=&quot;setting-up-openvpn&quot;&gt;Setting up OpenVPN&lt;/h1&gt;

&lt;p&gt;For obvious reasons, I need a VPN. After experimenting with PPTP, L2TP/IPSec, IPSec, I’ve decided to give &lt;a href=&quot;https://openvpn.net&quot;&gt;OpenVPN&lt;/a&gt; a try. So I signed up for ProtonVPN, a free (as in freedom) VPN service by the Swiss based organization ProtonMail. The experience is great, the stability even greater! So I decided to throw away my old IPSec configuration and switch to OpenVPN instead.&lt;/p&gt;

&lt;h2 id=&quot;installing-server-side-software&quot;&gt;Installing Server-Side Software&lt;/h2&gt;

&lt;p&gt;The Server side software is not diffcult to install. You could use your server’s package manager to download a pre-built version, or complie it yourself. For example, in Ubuntu/Debian, use&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;sudo apt-get install openvpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or compile it like I did&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;wget https://swupdate.openvpn.org/community/releases/openvpn-2.4.4.tar.gz
&lt;span class=&quot;c&quot;&gt;# use the up to date tar archive on https://openvpn.net&lt;/span&gt;
tar xfz openvpn-2.4.4.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;openvpn-2.4.4
./configure
make
make install &lt;span class=&quot;c&quot;&gt;# might need to put sudo before that&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note when configuring, a few error messages may appear. For the error &lt;code class=&quot;highlighter-rouge&quot;&gt;configure: error: ssl is required but missing&lt;/code&gt;, you will need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;libssl-dev&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;sudo apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the error &lt;code class=&quot;highlighter-rouge&quot;&gt;configure: error: lzo enabled but missing&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;sudo apt-get install liblzo2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the error &lt;code class=&quot;highlighter-rouge&quot;&gt;configure: error: libpam required but missing &lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;sudo apt-get install libpam0g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great thanks for &lt;a href=&quot;https://stackoverflow.com/users/2640725/deadcode&quot;&gt;deadcode&lt;/a&gt;’s &lt;a href=&quot;https://stackoverflow.com/a/28431851&quot;&gt;advice&lt;/a&gt; on Stack Overflow.&lt;/p&gt;

&lt;p&gt;Next, set up PKI and CA! TODO&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://www.mengyibai.cn/2017/11/03/Setting-Up-OpenVPN.html</link>
        <guid isPermaLink="true">http://www.mengyibai.cn/2017/11/03/Setting-Up-OpenVPN.html</guid>
        
        
      </item>
    
      <item>
        <title>the Gibbs Phenomenon</title>
        <description>&lt;p&gt;Fourier transformation is awesome! One example of its awesomeness is how a arbitrary function, even one with a finite number of discontinuities, could be approximated to arbitrary precision using Fourier sum. Useful for generating square waves using harmonic oscillators. But there’s a question: for signals with &lt;em&gt;jump discontinuities&lt;/em&gt;, such as the aforementioned square wave, could the Fourier sum model the &lt;em&gt;jump&lt;/em&gt; accurately? After all, how can you sum a bunch of smooth functions and end up with a discontinuities one? Well, the answer is yes and no. And that’s what the Gibbs Phenomenon is: the imperfect representation of jumps by Fourier series.&lt;/p&gt;

&lt;h1 id=&quot;gibbs-phenomenon&quot;&gt;Gibbs Phenomenon&lt;/h1&gt;

&lt;p&gt;A Fourier sum
\[
F_N(t)=\sum_{k=1}^{N}{C_ke^{ik\omega t}}
\]
is used to approximate periodic function \(F(t) \). For the piecewise continuous parts in \( F(t) \), when &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; gets bigger, the sum approaches the function in a uneventful way. But right after the jump, the sum will always overshoot a little bit, then oscillate for a while. The &lt;em&gt;spike&lt;/em&gt; will happen, no matter how big &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; gets. Or in formal words:
For a function &lt;script type=&quot;math/tex&quot;&gt;F(t)&lt;/script&gt; which has a jump at &lt;script type=&quot;math/tex&quot;&gt;$x_0&lt;/script&gt;, that is,
\[
\lim_{t \to t_0^+}{F(t)} = F_1
\]
while
\[
\lim_{t \to t_0^-}{F(t)} = F_1-a
\]
the following limit exists:
\[
\lim_{N \to +\infty}{F_N(t_0+\frac{T}{2N})} = F_1 + Wa
\]
where &lt;script type=&quot;math/tex&quot;&gt;W&lt;/script&gt; is a number with the first few digits as
\[
W = 0.08949\dots
\]
Similar limits exists just before the jump.&lt;/p&gt;

&lt;p&gt;This result is troubling: with a spike of one tenths of the original function, how can you call the Fourier series converging? Well, first, even thought the spikes will never go away, the place the spike happens is getting closer and closer to the jump point, making the spike narrower and narrower. Unlike the Dirac delta function, the height of the spike remain unchanged, so the area under the spike, or in a similar measure, the difference in power for signals, has a limit of zero. So in terms of energy, the convergence is sound.&lt;/p&gt;

&lt;p&gt;Also, remember what the Dirichlet conditions says:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The Fourier series is convergent where the original function is continuous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply &lt;em&gt;convergent&lt;/em&gt;, or pointwise convergent, not &lt;em&gt;uniform convergent&lt;/em&gt;! The Gibbs effect is an example of not uniform convergent. The series is uniform convergent on any domain between the two neighboring points of discontinuity, but not so on the open domain &lt;script type=&quot;math/tex&quot;&gt;(t_{dis}, t_{nextDis})&lt;/script&gt; where the two &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;s are the two discontinuities. Only pointwise convergence here. Also, thought the series is convergent at the jump point themselves, they converge to the average of the left and right limits at that point. So now the Gibbs effect seems not too unreasonable. Or as the Wikipedia article puts,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;There is no contradiction in the overshoot converging to a non-zero amount, but the limit of the partial sums having no overshoot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;in-a-physical-perspective&quot;&gt;In a Physical Perspective&lt;/h1&gt;
&lt;p&gt;From a signal processing point of view, the Gibbs phenomenon is the step response of a low pass filter. A ideal brick-wall low pass filter actually. With the transfer function of a low pass filter being a sinc function, the overshoot and the ripples could be seen as the result of convolving the step function with the sinc function. The oscillation of the sinc is the cause of the overshoot.&lt;/p&gt;

&lt;p&gt;To be precise, the phenomenon is a &lt;em&gt;ringing&lt;/em&gt; one. Not only does the signal overshoots, it also undershoots. It’s actually called a &lt;em&gt;ringing artifact&lt;/em&gt;, a important problem in signal processing.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Oct 2017 23:30:00 +0800</pubDate>
        <link>http://www.mengyibai.cn/2017/10/31/Gibbs-phenomenon.html</link>
        <guid isPermaLink="true">http://www.mengyibai.cn/2017/10/31/Gibbs-phenomenon.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting Up MathJax in a Jekyll Blog</title>
        <description>&lt;p&gt;&lt;em&gt;I’m greatly aided by &lt;a href=&quot;https://stackoverflow.com/questions/10987992/using-mathjax-with-jekyll/46349188#46349188&quot;&gt;Soham Bhattacharyya’s answer&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;stack overflow&lt;/code&gt;. Thanks a lot!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It would be a great convenience to use be able to use LaTex in my blog. After all, I’m writing a technical blog, so I certainly need someway to show math equations. Actually, &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; has some way of showing math symbols and equations: &lt;code class=&quot;highlighter-rouge&quot;&gt;MathML&lt;/code&gt;, or Math Markup Language. It is absolutely lousy, and has very limited support among browsers. Even Chrome doesn’t support it! So we turn to a not so native way—by using JavaScript to render the symbols.&lt;/p&gt;

&lt;p&gt;There exist a library for showing math symbols. All you need to do is write LaTex and the script would do the rendering for you. It’s called &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;, a 60 KiB JavaScript script that does all the dirty work. I’ll show you how to integrate it in Jekyll.&lt;/p&gt;

&lt;p&gt;There are numerous guides avaliable on how to integrate MathJax into Jekyll. But many of the guides are either unclear, conflicting or obsolete. So after some experimentation, I’ll show you a way that’s guarenteed to work.&lt;/p&gt;

&lt;p&gt;First, check what markdown editor you are using. Check the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file in the root directory of your blog. If the setting for &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;kramdown&lt;/code&gt;, then bingo! Kramdown offers built-in support. Add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;mathjax: true&lt;/code&gt; after that &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown: krandown&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;Then add this code snippet just before the &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; tag. To do so, go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;head.html&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory. Note its HEAD, not HEADER. Head is for the contents inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element in the html document, the place where you put all the scripts and metadatum, while “header” is for the uppermost part of the page. Add this line:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TeX-AMS-MML_HTMLorMML&lt;/code&gt; is for, quoting the &lt;a href=&quot;http://docs.mathjax.org/en/latest/configuration.html&quot;&gt;MathJax document&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;which loads MathJax with a configuration file that includes everything you need in order to enter mathematics in either TeX, LaTeX, or MathML notation, and produces output using MathML if MathML if the browser supports that well enough, or HTML-with-CSS otherwise.
You could try other configrations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And it’s done! (Note that when running a local Jekyll server, the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file would not be automatically incoperated into the final build when it’s changed. So restart the server to see the result.) To render the equations, write LaTex as you usually would. For inline, use &lt;code class=&quot;highlighter-rouge&quot;&gt;\( ... \)&lt;/code&gt;. As for block, use &lt;code class=&quot;highlighter-rouge&quot;&gt;\[ ... \]&lt;/code&gt;. Actually, the slashes &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; would need escaping, so what you’d acutally type is &lt;code class=&quot;highlighter-rouge&quot;&gt;\\( blahblahblah \\)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[ blublublu\\]&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;Examples:
inline: \( 1/x^{2} \)
and block:
\[
\frac{1}{n^{2}}
\]&lt;/p&gt;

</description>
        <pubDate>Sun, 29 Oct 2017 23:14:00 +0800</pubDate>
        <link>http://www.mengyibai.cn/2017/10/29/setting-up-MathJax.html</link>
        <guid isPermaLink="true">http://www.mengyibai.cn/2017/10/29/setting-up-MathJax.html</guid>
        
        
      </item>
    
      <item>
        <title>Green Function Method, and reciporcity</title>
        <description>&lt;p&gt;We know that the core of electrostatic problems is Possion’s equation:&lt;/p&gt;

&lt;p&gt;\[
\nabla^2V(\vec{x})=-\frac{\rho(\vec{x})}{\epsilon_0}
\]&lt;/p&gt;

&lt;p&gt;Solving the special case where &lt;script type=&quot;math/tex&quot;&gt;\rho=0&lt;/script&gt; ,that is, the Laplace equation, is easier(not &lt;em&gt;easy&lt;/em&gt;, just a tiny bit easier). There’s a variety of method avaiable, for example separation of variables. Also, due to numerous properties of the Laplace equation, solving it numerical is also easier. However, for most practical problems, there’s bound to be some charges. So what can we do?&lt;/p&gt;

&lt;p&gt;Well, not all boundary problems are &lt;em&gt;that&lt;/em&gt; diffcult to solve! Boundary problems that only include point charges are (a tiny bit) easier. For example, there’s the method of images that we could make use of. So, could we utilize the results of point charge problem and apply them to general situations? The answer is an absolute yes!&lt;/p&gt;

&lt;h2 id=&quot;diracs-delta-function&quot;&gt;Dirac’s delta function&lt;/h2&gt;
&lt;p&gt;To describe the charge density of point charges, we introduce the Dirac delta &lt;em&gt;function&lt;/em&gt;:
&lt;script type=&quot;math/tex&quot;&gt;\delta(x) = 0&lt;/script&gt;
when &lt;script type=&quot;math/tex&quot;&gt;x \ne 0&lt;/script&gt;, and
&lt;script type=&quot;math/tex&quot;&gt;\delta(x) = \infty&lt;/script&gt;
when &lt;script type=&quot;math/tex&quot;&gt;x = 0&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Note that this is not a literal function. It’s actually a distribution, a limit of functions. For example, the standard normal distribution
&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2\pi\sqrt{\sigma}} e^{-\frac{x^2}{2\sigma^2}}&lt;/script&gt;
will &lt;em&gt;become&lt;/em&gt; the delta function when &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; approches zero. The rigorous defination of the delta function is done in this way.&lt;/p&gt;

&lt;p&gt;A point charge occupies infitismal space, yet carries a finite amount of charge.  So while the delta function is infinite at zero, it’s integral is not. That is,
&lt;script type=&quot;math/tex&quot;&gt;\int{\delta(x)dx} = 1&lt;/script&gt;
for &lt;em&gt;any&lt;/em&gt; interval which contains zero, and
&lt;script type=&quot;math/tex&quot;&gt;\int{\delta(x)dx} = 0&lt;/script&gt;
for all the intervals without. The “one” there is chosen to keep things simple. Any finite number will do. In fact, one should think of the delta function as a &lt;em&gt;symbol&lt;/em&gt; that can only be used under the integral. For example, one of delta function’s most important property:
&lt;script type=&quot;math/tex&quot;&gt;\int{f(x)\delta(x)dx} = f(0)&lt;/script&gt;
where &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is some ordinary function. Only the value of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; at zero matters. Everything else is swept “under the rug”. It is best to think of the delta function as something waiting to be integrated.&lt;/p&gt;

&lt;p&gt;Of course, is easy to generalize  the function to more dimensions. Simply have the integral integrate over &lt;em&gt;volume&lt;/em&gt;, instead of length. Also, its easy to change the point where the value is infinte. For example, &lt;script type=&quot;math/tex&quot;&gt;\delta(x-3)&lt;/script&gt; is infinite at &lt;script type=&quot;math/tex&quot;&gt;x=3&lt;/script&gt;, and critical point here is three.&lt;/p&gt;

&lt;p&gt;So now we can describe a point charges’ density using the delta function. A point charge &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; at &lt;script type=&quot;math/tex&quot;&gt;\vec{x}&#39;&lt;/script&gt;  could be represented as
&lt;script type=&quot;math/tex&quot;&gt;\rho(\vec{x}) = q\delta(\vec{x} - \vec{x}&#39;)&lt;/script&gt;
note the delta function here is its three dimensional generalization.&lt;/p&gt;

&lt;h2 id=&quot;green-function&quot;&gt;Green Function&lt;/h2&gt;

&lt;p&gt;Now we are ready to tackle the real challenge.  The potential a point charge at &lt;script type=&quot;math/tex&quot;&gt;x&#39;&lt;/script&gt; causes satisfies Possions equation:
&lt;script type=&quot;math/tex&quot;&gt;\nabla^2V(\vec{x}) = -\frac{q}{\epsilon_0}\delta(\vec{x} - \vec{x}&#39;)&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;\[
|\psi_1\rangle = a|0\rangle + b|1\rangle
\]&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Oct 2017 20:13:46 +0800</pubDate>
        <link>http://www.mengyibai.cn/2017/10/12/Green-Function-Method-and-reciporcity.html</link>
        <guid isPermaLink="true">http://www.mengyibai.cn/2017/10/12/Green-Function-Method-and-reciporcity.html</guid>
        
        
      </item>
    
  </channel>
</rss>
